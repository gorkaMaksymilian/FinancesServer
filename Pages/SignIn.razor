@page "/signin"
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigator
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Sign in</PageTitle>

<MudContainer class="split left">
    <MudContainer class="centered">
        <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis auctor elit vitae ex pulvinar dictum.</MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Primary">Nunc sit amet sagittis libero.</MudText>
    </MudContainer>
</MudContainer>

<MudContainer class="split right">
    <MudContainer class="centered">
        <MudContainer class="auth-form-root">
            <MudText Typo="Typo.h2" Align="Align.Left">Sign in</MudText>
            <MudForm @bind-IsValid="@success">
                <MudTextField @bind-Value="@Username" Label="Username"  Variant="Variant.Outlined" Required="true" RequiredError="User name is required!"/>
                <MudTextField @bind-Value="@Email" Label="Email adress" Variant="Variant.Outlined" Required RequiredError="The email address is invalid"
                            Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                <MudTextField @ref="PasswordField" T="string" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" Required RequiredError="Password is required!" 
                            Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" HelperText="Choose a strong password"/>
                <MudTextField T="string" Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" 
                              Validation="@(new Func<string, string?>(PasswordMatch))" HelperText="Repeat the password"/>

                <MudButton @onclick="HandleLogin" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Style="margin-top: 6px;" Disabled="@(!success)">Sign in now</MudButton>
            </MudForm>
            <MudNavLink Href="/signup">Don't have an accout? Sign up</MudNavLink>
        </MudContainer>
    </MudContainer>
</MudContainer>

<style>
    .split {
        height: 100%;
        width: 50%;
        position: fixed;
        z-index: 1;
        top: 0;
        overflow-x: hidden;
        padding-top: 20px;
    }

    .auth-form-root {
        flex-basis: 720px;
        padding-left: 150px;
        padding-right: 150px;
        padding-bottom: 0px;
    }

    /* Control the left side */
    .left {
        left: 0;
        background-color: #111;
    }

    /* Control the right side */
    .right {
        right: 0;
    }

    /* If you want the content centered horizontally and vertically */
    .centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }
</style>

@code {
    public string? Email {get;set;}
    public string? Username {get;set;}
    MudTextField<string>? PasswordField;
    bool success;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        if (PasswordField!.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async void HandleLogin() 
    {
        await LocalStorage.SetItemAsync<string>("username", Username!);
        await AuthStateProvider.GetAuthenticationStateAsync();

        Navigator.NavigateTo("");
    }
}