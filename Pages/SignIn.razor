@page "/signin"
@using Models.Shared
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigator
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http

<PageTitle>Sign in</PageTitle>

<MudContainer class="split left">
    <MudContainer class="centered">
        <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">@titleText</MudText>
        <MudText Typo="Typo.subtitle1" Align="Align.Center" Color="Color.Primary">@subtitleText</MudText>
    </MudContainer>
</MudContainer>

<MudContainer class="split right">
    <MudContainer class="centered">
        <MudContainer class="auth-form-root">
            <MudText Typo="Typo.h2" Align="Align.Left">Sign in</MudText>
            <MudForm>
                <MudTextField @bind-Value="@usernameEmail" Label="Username/Email" Variant="Variant.Outlined" ></MudTextField>
                <MudTextField @bind-Value="@password" Label="Password" InputType="InputType.Password" Variant="Variant.Outlined"></MudTextField>
                <MudButton @onclick="HandleLogin" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Style="margin-top: 6px;">Sign in now</MudButton>
            </MudForm>
            <MudNavLink Href="/signup">Don't have an accout? Sign up</MudNavLink>
        </MudContainer>
    </MudContainer>
</MudContainer>

<style>
    .split {
        height: 100%;
        width: 50%;
        position: fixed;
        z-index: 1;
        top: 0;
        overflow-x: hidden;
        padding-top: 20px;
    }

    .auth-form-root {
        flex-basis: 720px;
        padding-left: 150px;
        padding-right: 150px;
        padding-bottom: 0px;
    }

    /* Control the left side */
    .left {
        left: 0;
        background-color: #111;
    }

    /* Control the right side */
    .right {
        right: 0;
    }

    /* If you want the content centered horizontally and vertically */
    .centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }
</style>

@code {
    public string? password {get;set;}
    public string? usernameEmail {get;set;}

    public string titleText = "Customized site that automaticly summs all of your monthly income and costs and displays them in comfortable dashboard";
    public string subtitleText = "Sign in now to get the full access";

    private async void HandleLogin() 
    {
        var users = await Http.GetFromJsonAsync<List<User>>($"{Navigator.BaseUri}api/user");
        var user = users!.Where(usr => (usr.Username == usernameEmail || usr.Email == usernameEmail)  && usr.Password == password).FirstOrDefault();

        if (user != null)
        {
            await LocalStorage.SetItemAsync<string>("username", user.Username!);
            await LocalStorage.SetItemAsync<AuthLevelEnum>("authLevel", user.AuthLevel);
            await AuthStateProvider.GetAuthenticationStateAsync();

            Navigator.NavigateTo("");
        }
        else 
        {
            titleText = "Invalid Username/Email and Password combination";
            StateHasChanged();
        }

        
    }

}