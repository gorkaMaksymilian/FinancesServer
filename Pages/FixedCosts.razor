@page "/fixedcosts"
@using FinancesServer.Components.Shared
@using Models.FixedCosts
@inject NavigationManager Navigator
@inject HttpClient Http
@inject IReloadOtherComponentService ReloadOtherComponent
@inject IGetFormatedDataService dataService
@inject ILocalStorageService LocalStorage

<PageTitle>Fixed costs</PageTitle>

<AuthorizeView>
        <Authorized>
            @{
                if (dataLoaded == false){
                    RefreshMe();
                    dataLoaded = true;
                }
            }
            <MudContainer MaxWidth="MaxWidth.Large">
                <MudText Typo="Typo.h2" Align="Align.Center" GutterBottom="true">Update your fixed cost:</MudText>

                <FixedForm Controller="fixedcost"/>

                <FixedDataGrid Data="@fixedCosts"/>
            </MudContainer>
        </Authorized>


        <NotAuthorized>
            <MudContainer class="fullscreen">
                <MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Primary" Class="centered">You need to sign in first.</MudText>
            </MudContainer>
        </NotAuthorized>
</AuthorizeView>



<style>
    .fullscreen {
        position: fixed;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        overflow: auto;
    }

    .centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }
</style>




@code {
    private IEnumerable<FixedCost>? fixedCosts;
    private bool dataLoaded = false;
    
    protected override void OnInitialized()
    {
        ReloadOtherComponent.RefreshRequested += RefreshMe;
    }

    
    private async void RefreshMe()
    {
        var userId = await LocalStorage.GetItemAsync<int>("userId");
        fixedCosts = await dataService.GetFixedCostsByUserId(userId);
        StateHasChanged();
    }
}

