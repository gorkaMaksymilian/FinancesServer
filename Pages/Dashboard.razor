@page "/dashboard"
@using FinancesServer.Components.Dashboard
@using Models.Dashboard
@inject IGetFormatedDataService dataService

<PageTitle>Dashboard</PageTitle>

<MudGrid Justify="Justify.SpaceBetween" Style="margin-top: 12px">
    <MudItem xs="4">
        <DataCard Controller="@ControllerEnum.Earnings" SummedAmount="@summedCurrentMonthEarnings" PercentageChange="@earningsPercentageChange"/>
    </MudItem>
    <MudItem xs="4">
        <DataCard Controller="@ControllerEnum.Expenses" SummedAmount="@summedCurrentMonthExpenses" PercentageChange="@expensesPercentageChange"/>
    </MudItem>
    <MudItem xs="4">
        <DataCard Controller="@ControllerEnum.Profit" SummedAmount="@summedCurrentMonthProfit" PercentageChange="@profitPercentageChange"/>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8">
            <MudText Typo="Typo.h6" Align="Align.Center">3</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8">
            <MudText Typo="Typo.h6" Align="Align.Center">3</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="3">
        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8">
            <MudText Typo="Typo.h6" Align="Align.Center">3</MudText>
        </MudPaper>
    </MudItem>
</MudGrid>



@code {
    // Move getting data from database here cause is pointless to connect so many times
    // Make components take this formated data and just put it in
    // So basically one compoment that takes Controller and lastmonth currentmonth data and puts them in place
    IEnumerable<MonthlyItem>? currentMonthEarnings;
    IEnumerable<MonthlyItem>? currentMonthExpenses;
    IEnumerable<MonthlyItem>? lastMonthEarnings;
    IEnumerable<MonthlyItem>? lastMonthExpenses;

    
    DateTime currentDate = DateTime.Today;

    decimal profitPercentageChange;
    decimal earningsPercentageChange;
    decimal expensesPercentageChange;

    decimal summedCurrentMonthEarnings;
    decimal summedCurrentMonthExpenses;
    decimal summedCurrentMonthProfit;

    protected override async Task OnInitializedAsync()
    {
        // Get all data needed
        currentMonthEarnings = await dataService.GetMonthlyEarnings(currentDate.Month, currentDate.Year);
        currentMonthExpenses = await dataService.GetMonthlyExpenses(currentDate.Month, currentDate.Year);
        lastMonthEarnings = await dataService.GetMonthlyEarnings(currentDate.AddMonths(-1).Month, currentDate.Year);
        lastMonthExpenses = await dataService.GetMonthlyExpenses(currentDate.AddMonths(-1).Month, currentDate.Year);

        if (currentMonthEarnings is not null && currentMonthExpenses is not null && lastMonthEarnings is not null && lastMonthExpenses is not null)
        {
            // Earnings
            summedCurrentMonthEarnings = GetSummedAmount(currentMonthEarnings);
            decimal summedLastMonthEarnings = GetSummedAmount(lastMonthEarnings);
            earningsPercentageChange = GetPercentageChange(summedLastMonthEarnings,summedCurrentMonthEarnings);

            // Expenses
            summedCurrentMonthExpenses = GetSummedAmount(currentMonthExpenses);
            decimal summedLastMonthExpenses = GetSummedAmount(lastMonthExpenses);
            expensesPercentageChange = GetPercentageChange(summedLastMonthExpenses, summedCurrentMonthExpenses);

            // Profit
            summedCurrentMonthProfit = summedCurrentMonthEarnings - summedCurrentMonthExpenses;
            decimal lastMonthProfit = summedLastMonthEarnings - summedLastMonthExpenses;
            profitPercentageChange = GetPercentageChange(lastMonthProfit, summedCurrentMonthProfit);
        }
    }

    protected decimal GetSummedAmount(IEnumerable<MonthlyItem> monthlyItems)
    {
        decimal sum = 0;
        if (monthlyItems is not null)
            foreach (var item in monthlyItems)
                sum += item.Amount;

        return sum;
    }

    protected decimal GetPercentageChange(decimal previous, decimal current)
    {
        if (previous == 0) {
            return decimal.MaxValue;
        }
            
        
        decimal change = (current - previous) / previous;
        return Math.Round(change,2) * 100;
    }
}



