@page "/dashboard"
@using FinancesServer.Components.Dashboard
@using Models.Dashboard
@inject IGetFormatedDataService dataService

<PageTitle>Dashboard</PageTitle>

<MudGrid Justify="Justify.SpaceBetween" Style="margin-top: 12px">
    <MudItem xs="4">
        <DataCard Controller="@ControllerEnum.Earnings" SummedAmount="@summedCurrentMonthEarnings" PercentageChange="@earningsPercentageChange"/>
    </MudItem>
    <MudItem xs="4">
        <DataCard Controller="@ControllerEnum.Profit" SummedAmount="@summedCurrentMonthProfit" PercentageChange="@profitPercentageChange"/>
    </MudItem>
    <MudItem xs="4">
        <DataCard Controller="@ControllerEnum.Expenses" SummedAmount="@summedCurrentMonthExpenses" PercentageChange="@expensesPercentageChange"/>
    </MudItem>

    <MudItem xs="6">
        <DonutCard Controller="@ControllerEnum.Earnings" AmountArray="@currentMonthEarningsAmounts" Labels="@currentMonthEarningsCategories"/>
    </MudItem>
    <MudItem xs="6">
        <DonutCard Controller="@ControllerEnum.Expenses" AmountArray="@currentMonthExpensesAmounts" Labels="@currentMonthExpensesCategories"/>
    </MudItem>

    <MudItem xs="6">
        <FixedDataCard Controller="@ControllerEnum.FixedIncome" SummedAmount="@summedFixedIncome"/>
    </MudItem>
    <MudItem xs="6">
        <FixedDataCard Controller="@ControllerEnum.FixedCosts" SummedAmount="@summedFixedCosts"/>
    </MudItem>
</MudGrid>


@code {
    // Used in getting data from database
    IEnumerable<MonthlyItem>? currentMonthEarnings;
    IEnumerable<MonthlyItem>? currentMonthExpenses;
    IEnumerable<MonthlyItem>? lastMonthEarnings;
    IEnumerable<MonthlyItem>? lastMonthExpenses;
    IEnumerable<MonthlyItem>? fixedCosts;
    IEnumerable<MonthlyItem>? fixedIncome;

    DateTime currentDate = DateTime.Today;

    // Used to pass data to FixedDataCard component
    decimal summedFixedCosts;
    decimal summedFixedIncome;

    // Used to pass data to DataCard component
    decimal profitPercentageChange;
    decimal earningsPercentageChange;
    decimal expensesPercentageChange;

    decimal summedCurrentMonthEarnings;
    decimal summedCurrentMonthExpenses;
    decimal summedCurrentMonthProfit;


    // Used to pass data to DonutCard component
    string[]? currentMonthEarningsCategories;
    double[]? currentMonthEarningsAmounts;

    string[]? currentMonthExpensesCategories;
    double[]? currentMonthExpensesAmounts;


    protected override async Task OnInitializedAsync()
    {
        // Get all data needed
        currentMonthEarnings = await dataService.GetMonthlyEarnings(currentDate.Month, currentDate.Year);
        currentMonthExpenses = await dataService.GetMonthlyExpenses(currentDate.Month, currentDate.Year);
        lastMonthEarnings = await dataService.GetMonthlyEarnings(currentDate.AddMonths(-1).Month, currentDate.Year);
        lastMonthExpenses = await dataService.GetMonthlyExpenses(currentDate.AddMonths(-1).Month, currentDate.Year);

        fixedCosts = await dataService.GetFixedCosts(currentDate.Month);
        fixedIncome = await dataService.GetFixedIncomes(currentDate.Month);

        if (currentMonthEarnings is not null && currentMonthExpenses is not null && lastMonthEarnings is not null && lastMonthExpenses is not null)
        {
            // Earnings (for DataCard)
            summedCurrentMonthEarnings = GetSummedAmount(currentMonthEarnings) + GetSummedAmount(fixedIncome);
            decimal summedLastMonthEarnings = GetSummedAmount(lastMonthEarnings) + GetSummedAmount(fixedIncome);
            earningsPercentageChange = GetPercentageChange(summedLastMonthEarnings,summedCurrentMonthEarnings);

            // Expenses (for DataCard)
            summedCurrentMonthExpenses = GetSummedAmount(currentMonthExpenses) + GetSummedAmount(fixedCosts);
            decimal summedLastMonthExpenses = GetSummedAmount(lastMonthExpenses) + GetSummedAmount(fixedCosts);
            expensesPercentageChange = GetPercentageChange(summedLastMonthExpenses, summedCurrentMonthExpenses);

            // Profit (for DataCard)
            summedCurrentMonthProfit = summedCurrentMonthEarnings - summedCurrentMonthExpenses;
            decimal lastMonthProfit = summedLastMonthEarnings - summedLastMonthExpenses;
            profitPercentageChange = GetPercentageChange(lastMonthProfit, summedCurrentMonthProfit);



            // Earnings (for DountCard)
            FillCategoryArray(currentMonthEarnings, ref currentMonthEarningsCategories);
            FillAmountArray(currentMonthEarnings, ref currentMonthEarningsAmounts);

            // Expenses (for DountCard)
            FillCategoryArray(currentMonthExpenses, ref currentMonthExpensesCategories);
            FillAmountArray(currentMonthExpenses, ref currentMonthExpensesAmounts);
        }

        summedFixedCosts = GetSummedAmount(fixedCosts);
        summedFixedIncome = GetSummedAmount(fixedIncome);
    }

    protected decimal GetSummedAmount(IEnumerable<MonthlyItem> monthlyItems)
    {
        decimal sum = 0;
        if (monthlyItems is not null)
            foreach (var item in monthlyItems)
                sum += item.Amount;

        return sum;
    }

    protected decimal GetPercentageChange(decimal previous, decimal current)
    {
        if (previous == 0) {
            return decimal.MaxValue;
        }
            
        
        decimal change = (current - previous) / previous;
        return Math.Round(change,2) * 100;
    }

    protected void FillCategoryArray(IEnumerable<MonthlyItem>? monthlyItems, ref string[]? categoryArray)
    {
        List<string> categories = new List<string>();

        if (monthlyItems is not null) 
            foreach (var item in monthlyItems) 
                categories.Add(item.Category!);
            
        categoryArray = categories.ToArray();
    }

    protected void FillAmountArray(IEnumerable<MonthlyItem>? monthlyItems, ref double[]? amountArray)
    {
        List<double> amounts = new List<double>();

        if (monthlyItems is not null) 
            foreach (var item in monthlyItems) 
                amounts.Add((double)item.Amount);
            
        amountArray = amounts.ToArray();
    }

}



