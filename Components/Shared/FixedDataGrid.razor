@using System.Reflection
@using Models.FixedCosts
@using Models.FixedIncomes
@using Models.Shared
@inject IDialogService DialogService
@inject HttpClient Http
@inject NavigationManager Navigator
@inject IReloadOtherComponentService ReloadOtherComponent
@typeparam T



@if (Data is not null)
{
    <MudDataGrid Items="@Data" Hover="@true" Dense="@true" Striped="@true" ReadOnly="@false" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual"
                 T="T" CommittedItemChanges="@CommittedItemChanges" style="margin-top: 40px;">
        <Columns>
            <Column T="T" Field="Id" Title="Id" IsEditable="false"/>
            <Column T="T" Field="Description" Title="Description"/>
            <Column T="T" Field="Amount" Title="Amount"/>
            <Column T="T" Field="Category" Title="Category"/>
            <Column T="T" Field="MonthOfFirstPayment" Title="MonthOfFirstPayment"/>
        </Columns>
    </MudDataGrid>


    @* <MudDataGrid Items="@Data" Hover="@true" Dense="@true" Striped="@true" ReadOnly="@false" EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual"
                 T="T" CommittedItemChanges="@CommittedItemChanges" style="margin-top: 40px;">
        <Columns>
            <Column T="T" Field="Id" Title="Id" IsEditable="false"/>
            <Column T="T" Field="Description" Title="Description"/>
            <Column T="T" Field="Amount" Title="Amount"/>
            <Column T="T" Field="Category" Title="Category">
                <EditTemplate>
                    @{categoryItem = context.Item.GetType()!.GetProperty("Category")!.GetValue(context.Item);}
                        @if(categoryItem is FixedIncomeCategoryEnum) {
                            <MudSelect T="FixedIncomeCategoryEnum" Value="(FixedIncomeCategoryEnum)categoryItem" Label="Category" Required RequiredError="You must select a category." 
                                       Margin="@Margin.Dense" ValueChanged="@( (newCategory) => context.Item.GetType()!.GetProperty("Category")!.SetValue(context.Item,newCategory))">
                                @foreach (FixedIncomeCategoryEnum category in Enum.GetValues(typeof(FixedIncomeCategoryEnum))) {
                                    <MudSelectItem Value="category">@category</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else if (categoryItem is FixedCostCategoryEnum) {
                            <MudSelect T="FixedCostCategoryEnum" Value="(FixedCostCategoryEnum)categoryItem" Label="Category" Required RequiredError="You must select a category." 
                                       Margin="@Margin.Dense" ValueChanged="@( (newCategory) => context.Item.GetType()!.GetProperty("Category")!.SetValue(context.Item,newCategory))">
                                @foreach (FixedCostCategoryEnum category in Enum.GetValues(typeof(FixedCostCategoryEnum))) {
                                    <MudSelectItem Value="category">@category</MudSelectItem>
                                }
                            </MudSelect>
                        }  
                </EditTemplate>
            </Column>

            <Column T="T" Field="MonthOfFirstPayment" Title="Month">
                <EditTemplate>
                @{currentMonth = context.Item.GetType()!.GetProperty("MonthOfFirstPayment")!.GetValue(context.Item);}
                    <MudSelect T="MonthEnum" Value="(MonthEnum)currentMonth!" Label="Current currentMonth" Required RequiredError="You must select a currentMonth." 
                                Margin="@Margin.Dense" ValueChanged="@( (currentMonth) => context.Item.GetType()!.GetProperty("MonthOfFirstPayment")!.SetValue(context.Item,currentMonth))">
                        @foreach (MonthEnum month in Enum.GetValues(typeof(MonthEnum))) {
                            <MudSelectItem Value="month">@month</MudSelectItem>
                        }
                    </MudSelect>
                </EditTemplate>
            </Column>

            <Column T="T" CellClass="d-flex justify-end" Sortable="@false">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Filled.Delete" OnClick="@(() => DeleteRow(context.Item))"/>           
                </CellTemplate>
            </Column>

        </Columns>
        <PagerContent>
            <MudDataGridPager T="T" PageSizeOptions=@(new int[] {5, 10, 20}) />
        </PagerContent>
    </MudDataGrid> *@
}




@code {
    
    [Parameter, EditorRequired]
    public IEnumerable<T>? Data {get;set;}
    
    // To make Category EditTemplate work
    object? categoryItem;
    object? currentMonth;

    
    public async Task CommittedItemChanges(T item)
    {
        IList<PropertyInfo> props = new List<PropertyInfo>(item.GetType().GetProperties());
        FixedIncome inc = new FixedIncome();
        FixedCost exp = new FixedCost();
        
        if (item is FixedCost) 
        {
            foreach (PropertyInfo prop in props)
                prop.SetValue(exp,prop.GetValue(item));
        
            await Http.PutAsJsonAsync<FixedCost>($"{Navigator.BaseUri}api/fixedcost/{exp.Id}", exp);
            ReloadOtherComponent.CallRequestRefresh();
        }
        else if (item is FixedIncome)
        {
            foreach (PropertyInfo prop in props)
                prop.SetValue(inc,prop.GetValue(item));
        
            await Http.PutAsJsonAsync<FixedIncome>($"{Navigator.BaseUri}api/fixedincome/{inc.Id}", inc);
            ReloadOtherComponent.CallRequestRefresh();
        }
        
        
        
    }

    public void DeleteRow(T item)
    {
        object Id = item!.GetType()!.GetProperty("Id")!.GetValue(item)!; 
        string itemType = item.GetType().ToString();

        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete this record? This process cannot be undone.");
        parameters.Add("Id", (int)Id);

        if (item is FixedIncome)
            parameters.Add("Controller", "fixedincome");
        else if (item is FixedCost)
            parameters.Add("Controller", "fixedcost");

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<DeleteDialog>("Delete", parameters, options);
        
    }


}