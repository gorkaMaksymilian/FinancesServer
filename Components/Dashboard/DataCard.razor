@using Models.Dashboard
@inject IGetFormatedDataService dataService

@if (currentMonthData is not null && lastMonthData is not null) 
{
    <MudCard>
        <MudCardHeader style="padding-bottom: 0px;">
            <CardHeaderContent>
                <MudText Typo="Typo.overline" Color="@HeaderColor" Style="font-size: 1.2rem">
                    @Title.ToUpper()
                </MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIcon Icon="@HeaderIcon" Color="@HeaderColor" Size="Size.Large" Style="font-size: 3.25rem" />
            </CardHeaderActions>
        </MudCardHeader>

        <MudCardContent style="padding-top: 0px;">
            @if (Controller == ControllerEnum.GetEarnings) {
                <MudText Typo="Typo.h2">$@GetSummedAmount(currentMonthData)</MudText>
            }
            else if (Controller == ControllerEnum.GetExpenses) {
                <MudText Typo="Typo.h2">-$@GetSummedAmount(currentMonthData)</MudText>
            }
            
            @if (percentageChange == 0) {
                <MudText Typo="Typo.body1">Income same as last months</MudText>
            }
            else if (percentageChange < 0) {
                <MudText Inline>
                    <MudIcon Icon="@Icons.Filled.ArrowDownward" Color="@percentageLessThanZeroColor" Style="font-size: 1.2rem"/>
                    <MudText Color="@percentageLessThanZeroColor" Inline Typo="Typo.body1">@percentageChange%</MudText>
                    <MudText Inline Typo="Typo.body1">Since last month</MudText>
                </MudText>
            }
            else {
                <MudText Inline>
                    <MudIcon Icon="@Icons.Filled.ArrowUpward" Color="@percentageGreaterThanZeroColor" Style="font-size: 1.2rem"/> 
                    <MudText Color="@percentageGreaterThanZeroColor" Inline Typo="Typo.body1">@percentageChange%</MudText>
                    <MudText Inline Typo="Typo.body1">Since last month</MudText>
                </MudText>
            }
        </MudCardContent>
    </MudCard>
}


@if (currentMonthData is not null) {
    @foreach (var item in currentMonthData) {
        <p>@item.Amount @item.Category</p>
    }
}
<p>LAST</p>
@if (lastMonthData is not null) {
    @foreach (var item in lastMonthData) {
        <p>@item.Amount @item.Category</p>
    }
}



@code {
    [Parameter]
    public string HeaderIcon {get;set;} = Icons.Filled.Bolt;

    [Parameter]
    public Color HeaderColor {get;set;} = Color.Default;

    [Parameter] 
    public string Title {get;set;} = "Set Title parameter to change this text.";

    [Parameter]
    public ControllerEnum Controller {get;set;}


    decimal percentageChange;
    Color percentageLessThanZeroColor;
    Color percentageGreaterThanZeroColor;


    DateTime currentDate = DateTime.Today;
    IEnumerable<MonthlyItem>? currentMonthData;
    IEnumerable<MonthlyItem>? lastMonthData;

    protected override async Task OnInitializedAsync()
    {
        if (Controller == ControllerEnum.GetEarnings) {
            currentMonthData = await dataService.GetMonthlyEarnings(currentDate.Month, currentDate.Year);
            lastMonthData = await dataService.GetMonthlyEarnings(currentDate.AddMonths(-1).Month, currentDate.Year);
            percentageChange = GetPercentageChange(GetSummedAmount(lastMonthData), GetSummedAmount(currentMonthData));

            percentageLessThanZeroColor = Color.Error;
            percentageGreaterThanZeroColor = Color.Success;
        }
        else if (Controller == ControllerEnum.GetExpenses) {
            currentMonthData = await dataService.GetMonthlyExpenses(currentDate.Month, currentDate.Year);
            lastMonthData = await dataService.GetMonthlyExpenses(currentDate.AddMonths(-1).Month, currentDate.Year);
            percentageChange = GetPercentageChange(GetSummedAmount(lastMonthData), GetSummedAmount(currentMonthData));

            percentageLessThanZeroColor = Color.Success;
            percentageGreaterThanZeroColor = Color.Error;
        }
        
        StateHasChanged();
    }

    protected decimal GetSummedAmount(IEnumerable<MonthlyItem> monthlyItems)
    {
        decimal sum = 0;
        if (monthlyItems is not null)
            foreach (var item in monthlyItems)
                sum += item.Amount;

        return sum;
    }

    protected decimal GetPercentageChange(decimal previous, decimal current)
    {
        if (previous == 0)
            throw new InvalidOperationException();
        
        decimal change = (current - previous) / previous;
        return Math.Round(change,2) * 100;
    }
}((byte)